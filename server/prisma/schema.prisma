generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// USERS
enum Role {
  USER
  ADMIN
  DEVELOPER
}

model User {
  id                    String            @id @default(uuid())
  email                 String            @unique
  password              String            @db.VarChar(250)
  role                  Role              @default(USER)
  profile               Profile?
  passwordReset         PasswordReset?
  verifications         UserVerification?
  cards                 CardInstance[]
  packs                 Pack[]
  deck                  Deck[]
  bank                  Bank?
  collectedStartedPacks Boolean           @default(false)
  loginRecord           LoginRecord?
  lastLoggedIn          DateTime          @updatedAt
  isVerified            Boolean           @default(false)
  agreedToTerms         Boolean           @default(false)
  isActive              Boolean           @default(true)
  createdEvents         Event[]           @relation("createdEvents")
  receivedEvents        Event[]           @relation("receivedEvents")
  createdBattles        Battle[]          @relation("createdBattles")
  receivedBattles       Battle[]          @relation("receivedBattles")
  battlesWon            Int               @default(0)
  battlesLost           Int               @default(0)
  playerXP              Int               @default(0)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime?         @updatedAt
}

model Profile {
  id              String            @id @default(uuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  username        String?           @unique @db.VarChar(28)
  country         String            @default("United Kingdom")
  gender          String?
  dob             DateTime?         @default(now())
  mediaAccounts   SocialMediaLink[]
  firstName       String?           @default("") @db.VarChar(50)
  lastName        String?           @default("") @db.VarChar(50)
  profileimageUrl String?           @default("https://www.pngfind.com/pngs/m/676-6764065_default-profile-picture-transparent-hd-png-download.png")
  isPrivate       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
}

model Battle {
  id                 String    @id @default(uuid())
  playerOneUsername  String
  playerTwoUsername  String
  playerOneConfirmed Boolean   @default(true)
  playerTwoConfirmed Boolean   @default(false)
  playerOneDeck      String[]
  playerTwoDeck      String[]
  coinFlipResult     String    @default("HEADS")
  currentPlayerTurn  String    @default("playerOne")
  winnerXP           Int       @default(10)
  loserXP            Int       @default(1)
  createdBy          User      @relation("createdBattles", fields: [createdById], references: [id], onDelete: Cascade)
  createdById        String
  receivedBy         User?     @relation("receivedBattles", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById       String?
  inProgress         Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
}

model Deck {
  id            String         @id @default(uuid())
  deckName      String         @default("Deck Name x")
  cards         CardInstance[]
  maxNumOfCards Int            @default(72)
  User          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

model Bank {
  id        String    @id @default(uuid())
  funds     Decimal   @default(1000)
  gems      Int       @default(25)
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model LoginRecord {
  id                String    @id @default(uuid())
  lastLoginDateTime DateTime  @default(now())
  collectedReward   Boolean   @default(false)
  daysInARow        Int       @default(1)
  userId            String?   @unique
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model SocialMediaLink {
  id        String    @id @default(uuid())
  name      String
  url       String
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserVerification {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model PasswordReset {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

enum PackType {
  ALPHA
  BETA
  GAMMA
}

enum CardType {
  MONSTER
  ITEM
  POWERUP
  SPECIAL
}

// Monster class
enum MonsterClass {
  ELEMENTAL
  DEMONIC
  ANGEL
  WATER
  SPACE
  TREE
  ELECTRIC
  TRICKSTER
  DEMIGOD
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  RAREHOLO
  MEGARARE
  MEGARAREHOLO
  ULTIMATE
}

enum BackgroundColour {
  WHITE
  BLACK
  RED
  PURPLE
  BLUE
  YELLOW
  GREEN
}

enum MonsterEffectType {
  ATTACK
  DEFENCE
  HEALTH
}

enum ItemEffectType {
  SKIP
  DISCARD
  RETRIEVE
  SHUFFLE
  DRAW
  TEMPERAL
  STATUS
}

enum PowerUpEffectType {
  HEALTH
  STRENGTH
  DEFENCE
  HEAL
  TEMPERAL
}

model Pack {
  id        String         @id @default(uuid()) // pack id
  packType  String
  cards     CardInstance[]
  userId    String?
  user      User?          @relation(fields: [userId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
}

model Card {
  id               Int              @id @default(autoincrement()) // pack id
  serialNumber     String           @unique @default("") @db.VarChar(128) // number from all cards
  cardName         String           @unique @db.VarChar(255) // name of the card
  edition          String           @default("") @db.VarChar(128) // first second third fouth
  rarity           Rarity           @default(COMMON)
  holographic      Boolean          @default(false) // holo card option available
  backgroundColour BackgroundColour @default(WHITE)
  packType         PackType
  cardType         CardType
  editable         Boolean          @default(false) // holo card option available
  imageUrl         String           @default("imageUrl") @db.VarChar(5000)
  isAvailable      Boolean          @default(true)
  cardStats        CardStat[]
  cardInstances    CardInstance[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
}

model CardInstance {
  id        String    @id @default(uuid())
  name      String    @default("Name")
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId    Int
  card      Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  packId    String?
  pack      Pack?     @relation(fields: [packId], references: [id])
  deckId    String?
  deck      Deck?     @relation(fields: [deckId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CardStat {
  id          Int       @id @default(autoincrement())
  value       Int
  description String?   @db.VarChar(255)

  monsterEffectType MonsterEffectType?
  itemEffectType    ItemEffectType?
  powerUpEffectType PowerUpEffectType?

  cardId Int
  card   Card @relation(fields: [cardId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
