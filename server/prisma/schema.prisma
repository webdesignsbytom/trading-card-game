generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// USERS
enum Role {
  USER
  ADMIN
  DEVELOPER
}

model User {
  id                    String            @id @default(uuid())
  email                 String            @unique
  password              String            @db.VarChar(250)
  role                  Role              @default(USER)
  profile               Profile?
  passwordReset         PasswordReset?
  verifications         UserVerification?
  cards                 CardInstance[]
  packs                 Pack[]
  deck                  Deck[]
  bank                  Bank?
  loginRecord           LoginRecord?
  lastLoggedIn          DateTime          @updatedAt
  isVerified            Boolean           @default(false)
  agreedToTerms         Boolean           @default(false)
  collectedStartedPacks Boolean           @default(false)
  isActive              Boolean           @default(true)
  createdTrades         TradeRecord[]     @relation("createdTrades")
  receivedTrades        TradeRecord[]     @relation("receivedTrades")
  createdEvents         Event[]           @relation("createdEvents")
  receivedEvents        Event[]           @relation("receivedEvents")
  createdBattles        Battle[]          @relation("createdBattles")
  receivedBattles       Battle[]          @relation("receivedBattles")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime?         @updatedAt
}

model Profile {
  id            String            @id @default(uuid())
  userId        String            @unique
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  username      String?           @unique @db.VarChar(28)
  country       String            @default("United Kingdom")
  gender        String?
  dob           DateTime?         @default(now())
  mediaAccounts SocialMediaLink[]
  firstName     String?           @default("") @db.VarChar(50)
  lastName      String?           @default("") @db.VarChar(50)
  profileimageUrl  String?           @default("https://www.pngfind.com/pngs/m/676-6764065_default-profile-picture-transparent-hd-png-download.png")
  isPrivate     Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
}

model Battle {
  id                 String    @id @default(uuid())
  playerOneUserName  String
  playerTwoUserName  String
  playerOneDeck      String[]
  playerTwoDeck      String[]
  playerOneConfirmed Boolean   @default(true)
  playerTwoConfirmed Boolean   @default(false)
  createdBy          User      @relation("createdBattles", fields: [createdById], references: [id], onDelete: Cascade)
  createdById        String
  receivedBy         User?     @relation("receivedBattles", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById       String?
  inProgress         Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
}

model Deck {
  id            String         @id @default(uuid())
  deckName      String         @default("Deck Name x")
  cards         CardInstance[]
  maxNumOfCards Int            @default(72)
  User          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

model Bank {
  id        String    @id @default(uuid())
  funds     Decimal   @default(1000)
  gems      Int       @default(25)
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model LoginRecord {
  id                String    @id @default(uuid())
  lastLoginDateTime DateTime  @default(now())
  collectedReward   Boolean   @default(false)
  daysInARow        Int       @default(1)
  userId            String?   @unique
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model TradeRecord {
  id                     String        @id @default(uuid())
  creatorAgreed          Boolean       @default(false)
  recieverAgreed         Boolean       @default(false)
  creatorUsername        String        @default("username")
  creatorCardInstance    CardInstance  @relation("creatorCardIntance", fields: [creatorCardInstanceId], references: [id], onDelete: Cascade)
  creatorCardId          Int
  creatorCardInstanceId  String        @default("creatorCard")
  creatorCardName        String        @default("Name")
  recieverUsername       String        @default("reciever uername")
  recieverCardInstance   CardInstance? @relation("recieverCardInstance", fields: [recieverCardInstanceId], references: [id], onDelete: Cascade)
  revieverCardId         Int?
  recieverCardInstanceId String?
  recieverCardName       String?
  createdTrades          User?         @relation("createdTrades", fields: [createdById], references: [id], onDelete: Cascade)
  createdById            String?
  receivedTrades         User?         @relation("receivedTrades", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById           String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime?     @updatedAt
}

model SocialMediaLink {
  id        String    @id @default(uuid())
  name      String
  url       String
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserVerification {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model PasswordReset {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

enum PackType {
  BREXIT
  COVID
  ELECTION
}

enum CardType {
  POLICY
  MEMBER
  PARTY
}

enum PowerUp {
  ATTACK
  HEALTH
  DEFENCE
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  RAREHOLO
  MEGARARE
  MEGARAREHOLO
  ULTIMATE
}

enum BackgroundColour {
  WHITE
  BLACK
  RED
  PURPLE
  BLUE
  YELLOW
  GREEN
}

enum PartyEffectType {
  HEALTH
  STRENGTH
  DEFENCE
  HEAL
}

enum PolicyEffectType {
  SKIP
  DISCARD
  RETRIEVE
  SHUFFLE
}

model Pack {
  id        String         @id @default(uuid()) // pack id
  packType  String
  cards     CardInstance[]
  userId    String?
  user      User?          @relation(fields: [userId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
}

model CardInstance {
  id                   String        @id @default(uuid()) // pack id
  name                 String        @default("Name")
  userId               String?
  user                 User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId               Int
  card                 Card          @relation(fields: [cardId], references: [id], onDelete: Cascade)
  packId               String?
  pack                 Pack?         @relation(fields: [packId], references: [id])
  creatorCardInstance  TradeRecord[] @relation("creatorCardIntance")
  recieverCardInstance TradeRecord[] @relation("recieverCardInstance")
  deck                 Deck?         @relation(fields: [deckId], references: [id])
  deckId               String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime?     @updatedAt
}

model Card {
  id               Int              @id @default(autoincrement()) // pack id
  serialNumber     String           @unique @default("") @db.VarChar(28) // number from all cards
  cardName         String           @unique @db.VarChar(48) // name of the card
  edition          String           @default("") @db.VarChar(28) // first second third fouth
  rarity           Rarity           @default(COMMON)
  holographic      Boolean          @default(false) // holo card option available
  packType         PackType
  cardType         CardType
  editable         Boolean          @default(true) // holo card option available
  imageUrl            String           @default("imageUrl") @db.VarChar(5000)
  backgroundColour BackgroundColour @default(WHITE)
  memberCard       MemberCard?
  partyCard        PartyCard?
  policyCard       PolicyCard?
  availability     Boolean          @default(true)
  cardInstance     CardInstance[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
}

model MemberCard {
  id         Int       @id @default(autoincrement()) // pack id
  memberName String    @default("name") @db.VarChar(250) // name of conservative memer
  health     Int       @default(40) // health of player card + 10 per year in office
  attack     Int       @default(10) // Plus 5 per year in office
  cardStat   String    @default("stats are cool") @db.VarChar(500) // whats written on the card
  cardId     Int       @unique
  card       Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model PartyCard {
  id             Int             @id @default(autoincrement()) // pack id
  name           String          @default("") @db.VarChar(250) // name of conservative memer
  powerUp        PowerUp         @default(ATTACK)
  cardStat       String          @default("") @db.VarChar(500) // whats written on the card
  effectType     PartyEffectType @default(HEALTH)
  statMultiplier Int             @default(10)
  effect         String          @default("") @db.VarChar(200)
  cardId         Int             @unique
  card           Card            @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
}

model PolicyCard {
  id               Int              @id @default(autoincrement()) // pack id
  name             String           @default("") @db.VarChar(250) // name of conservative memer
  cardStat         String           @default("") @db.VarChar(500) // whats written on the card
  effect           String           @default("") @db.VarChar(200)
  policyEffectType PolicyEffectType @default(SHUFFLE)
  statMultiplier   Int              @default(10)
  cardId           Int              @unique
  card             Card             @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
}
